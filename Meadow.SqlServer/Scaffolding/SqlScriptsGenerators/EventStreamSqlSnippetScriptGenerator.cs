using System.Collections.Generic;
using Meadow.Scaffolding.Attributes;
using Meadow.Scaffolding.CodeGenerators;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;

namespace Meadow.SqlServer.Scaffolding.SqlScriptsGenerators
{
    [CommonSnippet(CommonSnippets.EventStreamScript)]
    public class EventStreamSqlSnippetScriptGenerator : ByTemplateSqlSnippetGeneratorBase
    {
        private readonly string _keyTableName = GenerateKey();
        private readonly string _keyEventIdType = GenerateKey();
        private readonly string _keyAutogenerated = GenerateKey();
        private readonly string _keyStreamIdType = GenerateKey();
        private readonly string _keyTypeNameType = GenerateKey();
        private readonly string _keySerializedValueType = GenerateKey();

        private readonly string _keyInsertProcedureName = GenerateKey();
        private readonly string _keyEventIdInsertParameter = GenerateKey();
        private readonly string _keyEventIdInsertValueAndColumn = GenerateKey();
        private readonly string _keyInsertSelectStatement = GenerateKey();
        private readonly string _keyReadAllStreamsProcedureName = GenerateKey();
        private readonly string _keyReadStreamByStreamIdProcedureName = GenerateKey();
        private readonly string _keyReadAllStreamsChunksProcedureName = GenerateKey();
        private readonly string _keyReadStreamChunkByStreamIdProcedureName = GenerateKey();


        public EventStreamSqlSnippetScriptGenerator(SnippetConstruction construction,
            SnippetConfigurations configurations)
            : base(construction, configurations, new SnippetExecution()
            {
                SqlTranslator = new SqlServerTranslator(construction.MeadowConfiguration),
                TypeNameMapper = new SqlDbTypeNameMapper()
            })
        {
        }


        protected override void DeclareUnSupportedFeatures(ISupportDeclaration declaration)
        {
            base.DeclareUnSupportedFeatures(declaration);

            declaration.NotSupportedRepetitionHandling();
            declaration.NotSupportedDbObjectNameOverriding();
        }

        protected override void AddReplacements(Dictionary<string, string> replacementList)
        {
            replacementList.Add(_keyTableName, ProcessedType.NameConvention.EventStreamTableName);

            replacementList.Add(_keyEventIdType, ProcessedType.EventIdTypeName);

            replacementList.Add(_keyAutogenerated, ProcessedType.IsEventIdAutogenerated ? "IDENTITY (1,1)" : "");

            replacementList.Add(_keyStreamIdType, ProcessedType.StreamIdTypeName);

            replacementList.Add(_keyTypeNameType, ProcessedType.EventStreamTypeNameDatabaseType);

            replacementList.Add(_keySerializedValueType, ProcessedType.EventStreamSerializedValueDatabaseType);

            replacementList.Add(_keyEventIdInsertParameter,
                ProcessedType.IsEventIdAutogenerated ? "" : $"@EventId {ProcessedType.EventIdTypeName},");

            replacementList.Add(_keyInsertProcedureName, ProcessedType.NameConvention.InsertEventProcedure);

            replacementList.Add(_keyEventIdInsertValueAndColumn,
                ProcessedType.IsEventIdAutogenerated ? "" : ", @EventId");

            var returnNewInsertedRecord =
                $"DECLARE @NewId {ProcessedType.EventIdTypeName} = (IDENT_CURRENT('{ProcessedType.NameConvention.EventStreamTableName}'));" +
                $"\nSELECT * FROM {ProcessedType.NameConvention.EventStreamTableName} WHERE EventId=@NewId;";

            var insertSelectStatement = ProcessedType.IsEventIdAutogenerated
                ? returnNewInsertedRecord
                : "SELECT @EventId 'EventId',@StreamId 'StreamId', @TypeName 'TypeName', @SerializedValue 'SerializedValue';";

            replacementList.Add(_keyInsertSelectStatement, insertSelectStatement);

            replacementList.Add(_keyReadAllStreamsProcedureName, ProcessedType.NameConvention.ReadAllStreams);

            replacementList.Add(_keyReadStreamByStreamIdProcedureName,
                ProcessedType.NameConvention.ReadStreamByStreamId);

            replacementList.Add(_keyReadAllStreamsChunksProcedureName,
                ProcessedType.NameConvention.ReadAllStreamsChunks);

            replacementList.Add(_keyReadStreamChunkByStreamIdProcedureName,
                ProcessedType.NameConvention.ReadStreamChunkByStreamId);
        }

        protected override string Template => $@"
-- ---------------------------------------------------------------------------------------------------------------------
CREATE TABLE {_keyTableName} (
    EventId {_keyEventIdType} PRIMARY KEY {_keyAutogenerated},
    StreamId {_keyStreamIdType},
    TypeName {_keyTypeNameType},
    SerializedValue {_keySerializedValueType});
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {_keyInsertProcedureName}({_keyEventIdInsertParameter}
                                   @StreamId {_keyStreamIdType},
                                   @TypeName {_keyTypeNameType},
                                   @SerializedValue {_keySerializedValueType}) AS

    INSERT INTO {_keyTableName} (StreamId, TypeName, SerializedValue{_keyEventIdInsertValueAndColumn}) 
        VALUES (@StreamId,@TypeName,@SerializedValue{_keyEventIdInsertValueAndColumn});
    
    {_keyInsertSelectStatement}
    
GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {_keyReadAllStreamsProcedureName} AS
    SELECT * FROM {_keyTableName};
GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {_keyReadStreamByStreamIdProcedureName}(@StreamId {_keyStreamIdType}) AS

    SELECT * FROM {_keyTableName} WHERE StreamId = @StreamId;

GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {_keyReadAllStreamsChunksProcedureName}(@BaseEventId {_keyEventIdType}, @Count bigint) AS

    SELECT TOP (@Count) * FROM {_keyTableName} WHERE EventId > @BaseEventId
GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {_keyReadStreamChunkByStreamIdProcedureName}(
                                        @StreamId {_keyStreamIdType},
                                        @BaseEventId {_keyEventIdType},
                                        @Count bigint) AS

    SELECT TOP (@Count) * FROM {_keyTableName} WHERE StreamId = @StreamId AND EventId > @BaseEventId

GO
-- ---------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------
".Trim();
    }
}