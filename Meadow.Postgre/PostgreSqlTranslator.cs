using Meadow.Configuration;
using Meadow.Contracts;
using Meadow.Extensions;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;
using Meadow.Scaffolding.Models;
using Meadow.Sql;
using Meadow.Sql.Extensions;
using Microsoft.VisualBasic.CompilerServices;

namespace Meadow.Postgre
{
    public class PostgreSqlTranslator : SqlTranslatorBase
    {
        public override string CreateProcedurePhrase(RepetitionHandling repetition, string procedureName)
        {
            var creationHeader = "create";

            if (repetition == RepetitionHandling.Alter)
            {
                creationHeader = "create or replace";
            }

            return $"{creationHeader} function \"{procedureName}\"";
        }

        public override string CreateTablePhrase(RepetitionHandling repetition, string tableName)
        {
            var creationHeader = "create table";

            if (repetition == RepetitionHandling.Alter)
            {
                creationHeader = $"drop table if exists \"{tableName}\";" +
                                 $"\ncreate table";
            }

            if (repetition == RepetitionHandling.Skip)
            {
                creationHeader = "create table if not exists";
            }

            return $"{creationHeader} \"{tableName}\"";
        }

        public override string TableColumnDefinition(Parameter parameter)
        {
            var definition = $"{parameter.Name.DoubleQuot()} ";

            if (parameter.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) && parameter.IsNumerical)
            {
                definition += "SERIAL ";
            }

            definition += parameter.Type;

            return definition;
        }

        public override string CreateViewPhrase(RepetitionHandling repetition, string viewName)
        {
            var creationHeader = "create view";

            if (repetition == RepetitionHandling.Alter)
            {
                creationHeader = "create or replace view";
            }

            return $"{creationHeader} \"{viewName}\"";
        }

        public override bool DoubleQuotesColumnNames => true;
        public override bool DoubleQuotesTableNames => true;
        public override bool DoubleQuotesProcedureParameterNames => true;

        public override bool ProcedureParameterNamePrefixBeforeQuoting => true;


        protected override string NotEqualOperator => "<>";

        public override string ProcedureBodyParameterNamePrefix => "par_";
        public override string ProcedureDefinitionParameterNamePrefix => "par_";

        public PostgreSqlTranslator(MeadowConfiguration configuration)
            : base(new PostgreValueTranslator(configuration.ExternalTypeCasts))
        {
            Configuration = configuration;
        }

        public override string FormatProcedure(string creationPhrase, string parametersPhrase, string bodyContent, string declarations = "", string returnDataTypeName = "")
        {
            if (ParameterLessProcedureDefinitionParentheses || !string.IsNullOrWhiteSpace(parametersPhrase))
            {
                parametersPhrase = $"({parametersPhrase})";
            }

            if (!string.IsNullOrWhiteSpace(declarations)) declarations = $"\n{declarations}\n";

            var q = this.GetQuoters().QuoteColumnName;
            
            return creationPhrase + parametersPhrase + $" returns setof {q(returnDataTypeName)} as $$" +
                   declarations +
                   $"\nbegin\n" + bodyContent + "\nend;\n$$ language plpgsql;";
        }
    }
}