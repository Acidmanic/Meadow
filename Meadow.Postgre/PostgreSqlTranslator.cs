using System.Collections.Generic;
using Acidmanic.Utilities.Reflection.Casting;
using Meadow.Configuration;
using Meadow.Contracts;
using Meadow.Extensions;
using Meadow.Models;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;
using Meadow.Scaffolding.Models;
using Meadow.Sql;

namespace Meadow.Postgre
{
    public class PostgreSqlTranslator : SqlTranslatorBase
    {
        public override string CreateProcedurePhrase(RepetitionHandling repetition, string procedureName)
        {
            var creationHeader = "create";

            if (repetition == RepetitionHandling.Alter)
            {
                creationHeader = "create or replace";
            }

            return $"{creationHeader} function \"{procedureName}\"";
        }

        public override string CreateTablePhrase(RepetitionHandling repetition, string tableName)
        {
            var creationHeader = "create table";

            if (repetition == RepetitionHandling.Alter)
            {
                creationHeader = $"drop table if exists \"{tableName}\";" +
                                 $"\ncreate table";
            }

            if (repetition == RepetitionHandling.Skip)
            {
                creationHeader = "create table if not exists";
            }

            return $"{creationHeader} \"{tableName}\"";
        }

        public override TableParameterDefinition TableColumnDefinition(Parameter parameter)
        {
            var definition = $"{parameter.Name.DoubleQuot()} ";

            var parametersTail = "";
            
            if (parameter.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) && parameter.IsNumerical)
            {
                definition += "SERIAL ";
                
                parametersTail = $"PRIMARY KEY ({parameter.Name.DoubleQuot()})";
            }

            definition += parameter.Type;

            return new TableParameterDefinition(definition,parametersTail);
        }

        public override string TranslatePagination(Parameter offset, Parameter size)
        {
            return $"limit {this.Decorate(size,ParameterUsage.ProcedureBody)}" +
                   $" offset {this.Decorate(offset,ParameterUsage.ProcedureBody)}";
        }

        public override string CreateViewPhrase(RepetitionHandling repetition, string viewName)
        {
            var creationHeader = "create view";

            if (repetition == RepetitionHandling.Alter)
            {
                creationHeader = "create or replace view";
            }

            return $"{creationHeader} \"{viewName}\"";
        }

        public override bool DoubleQuotesColumnNames => true;
        public override bool DoubleQuotesTableNames => true;
        public override bool DoubleQuotesProcedureParameterNames => true;

        public override bool ProcedureParameterNamePrefixBeforeQuoting(ParameterUsage usage) => true;


        protected override string NotEqualOperator => "<>";
        

        public override string ParameterPrefix(ParameterUsage usage)
        {
            if (usage == ParameterUsage.ProcedureBody || usage == ParameterUsage.ProcedureDeclaration) return "par_";

            return string.Empty;
        }


        public override string FormatProcedure(string creationPhrase, string parametersPhrase, string bodyContent, string declarations = "", string returnDataTypeName = "")
        {
            if (ParameterLessProcedureDefinitionParentheses || !string.IsNullOrWhiteSpace(parametersPhrase))
            {
                parametersPhrase = $"({parametersPhrase})";
            }

            if (!string.IsNullOrWhiteSpace(declarations)) declarations = $"\n{declarations}\n";

            var q = this.GetQuoters().QuoteColumnName;
            
            return creationPhrase + parametersPhrase + $" returns setof {q(returnDataTypeName)} as $$" +
                   declarations +
                   $"\nbegin\n" + bodyContent + "\nend;\n$$ language plpgsql;";
        }
        
        protected override string EscapedStringValueQuote => "\\'";

        protected override string TranslateBoolean(bool value)
            => value ? "true" : "false";

        public PostgreSqlTranslator(MeadowConfiguration configuration) : base(configuration)
        {
        }
    }
}