using System.Collections.Generic;
using Acidmanic.Utilities.Reflection;
using Meadow.Scaffolding.Attributes;
using Meadow.Scaffolding.CodeGenerators;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;

namespace Meadow.Postgre.Scaffolding
{
    [CommonSnippet(CommonSnippets.EventStreamScript)]
    public class EventStreamCodeSnippetGenerator : ByTemplateSqlSnippetGeneratorBase
    {
        public EventStreamCodeSnippetGenerator(SnippetConstruction construction, SnippetConfigurations configurations)
            : base(construction, configurations, new SnippetExecution
            {
                SqlTranslator = new PostgreSqlTranslator(construction.MeadowConfiguration),
                TypeNameMapper = new PostgreDbTypeNameMapper()
            })
        {
        }

        protected override void DeclareUnSupportedFeatures(ISupportDeclaration declaration)
        {
            declaration.NotSupportedRepetitionHandling();
        }

        private readonly string _keyTableName = GenerateKey();
        private readonly string _keyEventIdTypeDeclaration = GenerateKey();
        private readonly string _keyInsertProcedureName = GenerateKey();
        private readonly string _keyInsertEventIdParameterDeclaration = GenerateKey();
        private readonly string _keyStreamIdTypeName = GenerateKey();
        private readonly string _keyInsertEventIdColumn = GenerateKey();
        private readonly string _keyInsertEventIdValue = GenerateKey();
        private readonly string _keyReadAllStreamsProcedureName = GenerateKey();
        private readonly string _keyReadStreamsByStreamIdProcedureName = GenerateKey();
        private readonly string _keyReadAllStreamsChunkProcedureName = GenerateKey();
        private readonly string _keyEventIdTypeName = GenerateKey();
        private readonly string _keyReadStreamChunkByStreamIdProcedureName = GenerateKey();


        protected override void AddReplacements(Dictionary<string, string> replacementList)
        {
            replacementList.Add(_keyTableName, ProcessedType.NameConvention.EventStreamTableName.DoubleQuot());

            replacementList.Add(_keyEventIdTypeDeclaration,
                TypeCheck.IsNumerical(ProcessedType.EventStream.EventIdType)
                    ? "SERIAL"
                    : ProcessedType.EventIdTypeName);

            replacementList.Add(_keyInsertProcedureName, ProcessedType.NameConvention.InsertEvent.DoubleQuot());

            var insertParameterDeclaration = ProcessedType.IsEventIdAutogenerated
                ? ""
                : $"\"par_EventId\" {ProcessedType.EventIdTypeName},\n        ";

            replacementList.Add(_keyInsertEventIdParameterDeclaration, insertParameterDeclaration);

            replacementList.Add(_keyStreamIdTypeName, ProcessedType.StreamIdTypeName);

            var insertEventIdColumn = ProcessedType.IsEventIdAutogenerated ? "" : $"\n        \"EventId\",";

            var insertEventIdValue = ProcessedType.IsEventIdAutogenerated ? "" : $"\n        \"par_EventId\",";

            replacementList.Add(_keyInsertEventIdColumn, insertEventIdColumn);

            replacementList.Add(_keyInsertEventIdValue, insertEventIdValue);

            replacementList.Add(_keyReadAllStreamsProcedureName,
                ProcessedType.NameConvention.ReadAllStreams.DoubleQuot());

            replacementList.Add(_keyReadStreamsByStreamIdProcedureName,
                ProcessedType.NameConvention.ReadStreamByStreamId.DoubleQuot());

            replacementList.Add(_keyEventIdTypeName, ProcessedType.EventIdTypeName);

            replacementList.Add(_keyReadAllStreamsChunkProcedureName,
                ProcessedType.NameConvention.ReadAllStreamsChunks.DoubleQuot());

            replacementList.Add(_keyReadStreamChunkByStreamIdProcedureName,
                ProcessedType.NameConvention.ReadStreamChunkByStreamId.DoubleQuot());
        }

        protected override string Template => $@"
create table {_keyTableName}({"EventId".DoubleQuot()} {_keyEventIdTypeDeclaration},
        {"StreamId".DoubleQuot()} {_keyStreamIdTypeName},
        {"TypeName".DoubleQuot()} TEXT,
        {"SerializedValue".DoubleQuot()} TEXT,
        PRIMARY KEY ({"EventId".DoubleQuot()})
);
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------
create or replace function {_keyInsertProcedureName}(
        {_keyInsertEventIdParameterDeclaration}{"par_StreamId".DoubleQuot()} {_keyStreamIdTypeName},
        {"par_TypeName".DoubleQuot()} TEXT,
        {"par_SerializedValue".DoubleQuot()} TEXT) returns setof {_keyTableName} as $$
        begin
            return query
                insert into {_keyTableName} ({_keyInsertEventIdColumn}
                    {"StreamId".DoubleQuot()},
                    {"TypeName".DoubleQuot()},
                    {"SerializedValue".DoubleQuot()})
                values ({_keyInsertEventIdValue}
                    {"par_StreamId".DoubleQuot()},
                    {"par_TypeName".DoubleQuot()},
                    {"par_SerializedValue".DoubleQuot()})
            returning * ;
        end;
$$ language plpgsql;
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------
create or replace function {_keyReadAllStreamsProcedureName}() returns setof {_keyTableName} as $$
    begin
        return query
            select * from {_keyTableName};
    end;
$$ language plpgsql ;
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------
create or replace function {_keyReadStreamsByStreamIdProcedureName}({"par_StreamId".DoubleQuot()} {_keyStreamIdTypeName}) returns setof {_keyTableName} as $$
    begin
        return query
            select * from {_keyTableName} where {"StreamId".DoubleQuot()} = {"par_StreamId".DoubleQuot()};
    end;
$$ language plpgsql ;
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------

create or replace function {_keyReadAllStreamsChunkProcedureName}(
    {"par_BaseEventId".DoubleQuot()} {_keyEventIdTypeName},
    {"par_Count".DoubleQuot()} INT ) returns setof {_keyTableName} as $$
    begin
        return query
            select * from {_keyTableName} 
                where {"EventId".DoubleQuot()} > {"par_BaseEventId".DoubleQuot()}
                limit {"par_Count".DoubleQuot()};
    end;
$$ language plpgsql ;
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------
create or replace function {_keyReadStreamChunkByStreamIdProcedureName}(
    {"par_StreamId".DoubleQuot()} {_keyStreamIdTypeName},
    {"par_BaseEventId".DoubleQuot()} {_keyEventIdTypeName},
    {"par_Count".DoubleQuot()} INT ) returns setof {_keyTableName} as $$
    begin
    return query
        select * from {_keyTableName} 
            where {"StreamId".DoubleQuot()} = {"par_StreamId".DoubleQuot()}  
            and {"EventId".DoubleQuot()} > {"par_BaseEventId".DoubleQuot()}
            limit {"par_Count".DoubleQuot()};
    end;
$$ language plpgsql ;
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------
";
    }
}