using System.Diagnostics.CodeAnalysis;
using Acidmanic.Utilities.Filtering.Extensions;
using Acidmanic.Utilities.Reflection.ObjectTree;
using Meadow.Contracts;
using Meadow.DataAccessResolving;
using Meadow.Extensions;
using Meadow.Sql.Extensions;
using Meadow.Utility;

namespace Meadow.Test.Functional.TestEnvironment.Extensions;

public static class SuitContextExtensions
{
    public static string TranslateSelectAll<TModel>(this ISuitContext context, bool fullTree = false)
    {
        var configuration = context.MeadowConfiguration;

        var resolver = new DataAccessServiceResolver(configuration);

        var tr = resolver.SqlTranslator;

        var semi = tr.UsesSemicolon ? ";" : string.Empty;

        var nc = configuration.GetNameConvention(typeof(TModel));

        var source = fullTree ? nc.FullTreeViewName : nc.TableName;

        source = tr.GetQuoters().QuoteTableName(source);

        return $"SELECT * FROM {source}{semi}";
    }

    public static string TranslateInsert<TModel>(this ISuitContext context, TModel model) where TModel : class
    {
        var configuration = context.MeadowConfiguration;

        var resolver = new DataAccessServiceResolver(configuration);

        var sqlTranslator = resolver.SqlTranslator;
        var valueTranslator = resolver.ValueTranslator;

        var semi = sqlTranslator.UsesSemicolon ? ";" : string.Empty;

        var type = typeof(TModel);

        var processedType = EntityTypeUtilities.Process(type, configuration, resolver.DbTypeNameMapper);
        
        var qt = sqlTranslator.GetQuoters();
        
        var source = qt.QuoteTableName(processedType.NameConvention.TableName);
        
        var ev = new ObjectEvaluator(model);

        var columnParameters = processedType.Parameters
            .Where(p => p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) == false)
            .ToList();
        
        var columns = new List<string>();
        var values = new List<string>();

        foreach (var columnParameter in columnParameters)
        {
            if (ev.Read(columnParameter.StandardAddress, true) is { } value)
            {
                values.Add(valueTranslator.Translate(value));
                columns.Add(qt.QuoteColumnName(columnParameter.Name));
            }
        }
        
        return $"INSERT INTO {source} ({string.Join(',',columns)}) VALUES ({string.Join(',',values)}){semi}";
    }
}