using System.Diagnostics.CodeAnalysis;
using Acidmanic.Utilities.Filtering.Extensions;
using Acidmanic.Utilities.Reflection.ObjectTree;
using Meadow.Configuration;
using Meadow.Contracts;
using Meadow.DataAccessResolving;
using Meadow.Extensions;
using Meadow.Sql.Extensions;
using Meadow.Utility;

namespace Meadow.Test.Functional.TestEnvironment.Extensions;

public static class SuitContextExtensions
{

    public static string TranslateSelectAll<TModel>(this ISuitContext context, bool fullTree = false)
        => TranslateSelectAll<TModel>(context.MeadowConfiguration, fullTree);

    public static string TranslateInsert<TModel>(this ISuitContext context, TModel model) where TModel : class
        => TranslateInsert(context.MeadowConfiguration, model);

    public static string TranslateSelectAll<TModel>(this MeadowConfiguration configuration, bool fullTree = false)
        => TranslateSelectAll(configuration, typeof(TModel), fullTree);
    
    public static string TranslateSelectAll(this MeadowConfiguration configuration, Type modelType, bool fullTree = false)
    {

        var resolver = new DataAccessServiceResolver(configuration);

        var tr = resolver.SqlTranslator;

        var semi = tr.UsesSemicolon ? ";" : string.Empty;

        var nc = configuration.GetNameConvention(modelType);

        var source = fullTree ? nc.FullTreeViewName : nc.TableName;

        source = tr.GetQuoters().QuoteTableName(source);

        return $"SELECT * FROM {source}{semi}";
    }



    public static string TranslateInsert<TModel>(this MeadowConfiguration configuration, TModel model) where TModel : class
        => TranslateInsert(configuration, typeof(TModel), model);
    
    public static string TranslateInsert(this MeadowConfiguration configuration,Type modelType, object model, string? overrideTableName = null)
    {
        var resolver = new DataAccessServiceResolver(configuration);

        var sqlTranslator = resolver.SqlTranslator;
        var valueTranslator = resolver.ValueTranslator;

        var semi = sqlTranslator.UsesSemicolon ? ";" : string.Empty;
        
        var processedType = EntityTypeUtilities.Process(modelType, configuration, resolver.DbTypeNameMapper);
        
        var qt = sqlTranslator.GetQuoters();
        
        var source = qt.QuoteTableName(processedType.NameConvention.TableName);

        if (overrideTableName is { } tn) source = qt.QuoteTableName(tn);
        
        var ev = new ObjectEvaluator(model);

        var columnParameters = processedType.Parameters
            .Where(p => p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) == false)
            .ToList();
        
        var columns = new List<string>();
        var values = new List<string>();

        foreach (var columnParameter in columnParameters)
        {
            if (ev.Read(columnParameter.StandardAddress, true) is { } value)
            {
                values.Add(valueTranslator.Translate(value));
                columns.Add(qt.QuoteColumnName(columnParameter.Name));
            }
        }
        
        return $"INSERT INTO {source} ({string.Join(',',columns)}) VALUES ({string.Join(',',values)}){semi}";
    }
}