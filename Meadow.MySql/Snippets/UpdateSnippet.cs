using Meadow.Scaffolding.Attributes;
using Meadow.Scaffolding.Extensions;
using Meadow.Scaffolding.Snippets;
using Meadow.Scaffolding.Snippets.Builtin;

namespace Meadow.MySql.Snippets;

[CommonSnippet(CommonSnippets.UpdateProcedure)]
public class UpdateSnippet:ISnippet
{
    public ISnippetToolbox Toolbox { get; set; } = SnippetToolbox.Null;

    public string ProcedureDefinition => Toolbox.SqlTranslator.CreateProcedurePhrase(Toolbox.Configurations.RepetitionHandling,
        Toolbox.ProcessedType.NameConvention.UpdateProcedureName);

    public string TableName => Toolbox.ProcessedType.NameConvention.TableName;

    public string KeyNoneIdParametersSet => Toolbox.GetNoneAutoGeneratedSets();
    
    public string KeyEntityFilterSegment => Toolbox.GetEntityFiltersWhereClause(" AND "," ");
    
    public string IdEqualityClause => Toolbox.EqualityClause(Toolbox.ProcessedType.IdParameter!, false,
        Toolbox.ProcessedType.NameConvention.TableName); 
    
    public string Procedure(string body) => Toolbox.Procedure(
        Toolbox.Configurations.RepetitionHandling,
        Toolbox.ProcessedType.NameConvention.UpdateProcedureName,
        body, string.Empty,Toolbox.ProcessedType.NameConvention.TableName,
        Toolbox.ProcessedType.Parameters.ToArray());

    public string Semicolon => Toolbox.Semicolon();

    public ISnippet Error => new TitleBarSnippet("Can not Create Update By Id Procedure For Type with no Id in it.");
    
    public string Template => Toolbox.ProcessedType.HasId? @"
{Procedure}
    UPDATE {TableName} SET {KeyNoneIdParametersSet} WHERE {IdEqualityClause}{KeyEntityFilterSegment}{Semicolon}
    SELECT * FROM {TableName} WHERE {IdEqualityClause}{KeyEntityFilterSegment}{Semicolon}
{/Procedure}
".Trim():"{Error}";
}