using Meadow.Scaffolding.Attributes;
using Meadow.Scaffolding.Extensions;
using Meadow.Scaffolding.Snippets;
using Meadow.Scaffolding.Snippets.Builtin;

namespace Meadow.MySql.Snippets;

[CommonSnippet(CommonSnippets.InsertProcedure)]
public class InsertSnippet : ISnippet
{
    public ISnippetToolbox Toolbox { get; set; } = SnippetToolbox.Null;

    public string KeyTableName => Toolbox.ProcessedType.NameConvention.TableName;
    public string KeyInsertColumns => Toolbox.GetNoneAutoGeneratedColumns();
    public string KeyInsertValues => Toolbox.GetNoneAutoGeneratedValues();

    private static readonly string NewIdVariable = "@nid";

    public string KeyWhere => Toolbox.ProcessedType.HasId ? "WHERE " + Toolbox.EqualityClause(Toolbox.ProcessedType.IdParameter!, NewIdVariable) : Toolbox.WhereByValuesClause();

    public string KeyEntityFilterSegment => Toolbox.GetEntityFiltersWhereClause(" AND ", "");
    
    public string KeyDeclareNewId => $"SET {NewIdVariable} = (select LAST_INSERT_ID());";

    public string Procedure(string body) => Toolbox.Procedure
    (Toolbox.Configurations.RepetitionHandling, Toolbox.ProcessedType.NameConvention.InsertProcedureName,
        body, string.Empty, Toolbox.ProcessedType.NameConvention.TableName,
        Toolbox.GetNoneAutoGeneratedParameters().ToArray());

    public ISnippet Line => new CommentLineSnippet();
    
    public string Semicolon => Toolbox.Semicolon();
    
    public string Template => @"
{Procedure}
    INSERT INTO {KeyTableName} ({KeyInsertColumns}) VALUES ({KeyInsertValues}){Semicolon}
    {KeyDeclareNewId}
    SELECT * FROM {KeyTableName} {KeyWhere}{KeyEntityFilterSegment} LIMIT 1{Semicolon}
{/Procedure}
{Line}
".Trim();
}