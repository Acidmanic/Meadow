using System.Linq;
using Meadow.Contracts;
using Meadow.Scaffolding.CodeGenerators.CodeGeneratingComponents;
using Meadow.Scaffolding.Extensions;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;
using Meadow.Scaffolding.Models;
using Meadow.Scaffolding.Snippets;

namespace Meadow.MySql.Snippets;

public class SaveProcedureByCollectionNameSnippet : ISnippet
{
    public SnippetToolbox? Toolbox { get; set; }

    public SaveProcedureByCollectionNameSnippet(SnippetToolbox toolbox, SaveProcedureComponents saveComponents)
    {
        Toolbox = toolbox;
        KeyHeaderCreationPhrase = toolbox.SqlTranslator.CreateProcedurePhrase
            (toolbox.Configurations.RepetitionHandling, saveComponents.ProcedureName);
        
        KeyGeneralWhereClause = string.Join(" AND ",
            saveComponents.WhereEqualities.Select(p => EqualityClause(KeyTableName, p)));
        
        KeyInsertWhereClause = KeyGeneralWhereClause;
        PreKeyInsertColumns = string.Join(',', saveComponents.InsertUpdateParameters.Select(p => p.Name));
        PreKeyInsertValues = string.Join(',', saveComponents.InsertUpdateParameters.Select(p => p.Name));
        PreKeyUpdates = toolbox.ParameterNameValueSetJoint(saveComponents.InsertUpdateParameters, ",", string.Empty);
        KeyParameters = toolbox.ParameterNameTypeJoint(toolbox.ProcessedType.Parameters, ",", "IN ");
        KeyDeclareNewId = "";
        if (toolbox.ProcessedType.HasId && toolbox.ProcessedType.IsIdAutoGenerated())
        {
            KeyDeclareNewId = "SET @nid = (select LAST_INSERT_ID());" ;
            KeyInsertWhereClause = $"{KeyTableName}.{toolbox.ProcessedType.IdParameter.Name}{EqualityAssertion(toolbox.ProcessedType.IdParameter)}@nid";
        }
    }

    private string EqualityClause(string tableName, Parameter p)
    {
        return tableName + "." + p.Name + " " + EqualityAssertion(p) + " " + p.Name;
    }
    

    private string EqualityAssertion(Parameter p)
    {
        return IsString(p) ? "like" : "=";
    }

    private bool IsString(Parameter p)
    {
        var typeLower = p.Type.ToLower().Trim();

        return typeLower.StartsWith("text") ||
               typeLower.StartsWith("varchar") ||
               typeLower.StartsWith("nvarchar");
    }

    public string KeyHeaderCreationPhrase { get; }
    
    public string KeyGeneralWhereClause { get; }
    
    public string KeyInsertWhereClause { get; }

    public string PreKeyInsertColumns { get; }

    public string PreKeyInsertValues { get; }

    public string PreKeyUpdates { get; }

    public string KeyTableName => Toolbox?.ProcessedType.NameConvention.TableName ?? "";

    public string KeyEntityFilterSegment =>
        Toolbox?.GetFiltersWhereClause(ColumnNameTranslation.ColumnNameOnly, " AND ", " ") ?? "";

    public string KeyParameters { get; }
    
    public string KeyDeclareNewId { get; }

    public string Template => $@"
{KeyHeaderCreationPhrase}({KeyParameters})
BEGIN
    IF EXISTS(SELECT 1 FROM {KeyTableName} WHERE {KeyGeneralWhereClause}{KeyEntityFilterSegment}) THEN
        
        UPDATE {KeyTableName} SET {PreKeyUpdates} WHERE {KeyGeneralWhereClause}{KeyEntityFilterSegment};
        SELECT * FROM {KeyTableName} WHERE {KeyGeneralWhereClause}{KeyEntityFilterSegment} LIMIT 1;
    ELSE
        INSERT INTO {KeyTableName} ({PreKeyInsertColumns}) VALUES ({PreKeyInsertValues});    
        {KeyDeclareNewId}    
        SELECT * FROM {KeyTableName} WHERE {KeyInsertWhereClause}{KeyEntityFilterSegment} LIMIT 1;
    END IF;

    
END;
".Trim();
}