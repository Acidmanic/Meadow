using System.Collections.Generic;
using System.Linq;
using Meadow.Configuration;
using Meadow.Contracts;
using Meadow.Scaffolding.Attributes;
using Meadow.Scaffolding.Extensions;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;

namespace Meadow.MySql.Scaffolding.MySqlScriptGenerators
{
    public class InsertSnippetProcedureGenerator<TEntity> : InsertSnippetProcedureGenerator
    {
        public InsertSnippetProcedureGenerator(MeadowConfiguration configuration)
            : base(new SnippetConstruction
            {
                EntityType = typeof(TEntity),
                MeadowConfiguration = configuration
            }, SnippetConfigurations.Default())
        {
        }
    }

    [CommonSnippet(CommonSnippets.InsertProcedure)]
    public class InsertSnippetProcedureGenerator : MySqlRepetitionHandlerProcedureGeneratorBase
    {
        private readonly string _keyParameters = GenerateKey();
        private readonly string _keyTableName = GenerateKey();
        private readonly string _keyColumns = GenerateKey();
        private readonly string _keyValues = GenerateKey();
        private readonly string _keyIdColumn = GenerateKey();
        private readonly string _keyDeclareNewId = GenerateKey();
        private readonly string _keySelectNoIdParameters = GenerateKey();
        private readonly string _keyEntityFilterSegment = GenerateKey();
        private readonly string _keyEntityFilterSegmentNoAnd = GenerateKey();

        public InsertSnippetProcedureGenerator(SnippetConstruction construction, SnippetConfigurations configurations) :
            base(construction, configurations)
        {
        }

        protected override string GetProcedureName(bool fullTree)
        {
            return ProvideDbObjectNameSupportingOverriding(() => ProcessedType.NameConvention.InsertProcedureName);
        }

        protected override void AddBodyReplacements(Dictionary<string, string> replacementList)
        {
            var insertParameters = ProcessedType.GetInsertParameters();

            var parameters = string.Join(',', insertParameters.Select(p => "IN " + p.Name + " " + p.Type));

            replacementList.Add(_keyParameters, parameters);

            replacementList.Add(_keyTableName, ProcessedType.NameConvention.TableName);

            var columnsAndValues = string.Join(',', insertParameters.Select(p => p.Name));

            replacementList.Add(_keyColumns, columnsAndValues);

            replacementList.Add(_keyValues, columnsAndValues);


            if (ProcessedType.HasId)
            {
                replacementList.Add(_keyIdColumn, ProcessedType.IdField.Name);
                var newId = ProcessedType.IsIdAutoGenerated()
                    ? "SET @nid = (select LAST_INSERT_ID());"
                    : "SET @nid = " + ProcessedType.IdParameter.Name + ";";
                replacementList.Add(_keyDeclareNewId, newId);
                replacementList.Add(_keySelectNoIdParameters, "");
            }
            else
            {
                var selectNoIdParameters = string.Join(',', insertParameters.Select(p => p.Name));
                replacementList.Add(_keySelectNoIdParameters, selectNoIdParameters);
                replacementList.Add(_keyDeclareNewId, "");
                replacementList.Add(_keyIdColumn, "");
            }
            
            var entityFilterExpression = GetFiltersWhereClause(ColumnNameTranslation.ColumnNameOnly);
            
            var entityFilterSegment = entityFilterExpression.Success ? $" AND ({entityFilterExpression.Value}) " : "";
            var entityFilterSegmentNoAnd = entityFilterExpression.Success ? $" WHERE ({entityFilterExpression.Value}) " : "";
            
            replacementList.Add(_keyEntityFilterSegment,entityFilterSegment);
            replacementList.Add(_keyEntityFilterSegmentNoAnd,entityFilterSegmentNoAnd);
        }

        protected override string Template => ProcessedType.HasId ? IdTemplate : NoIdTemplate;


        private string NoIdTemplate => @$"
{KeyCreationHeader} {KeyProcedureName}({_keyParameters})
BEGIN
    INSERT INTO {_keyTableName} ({_keyColumns}) VALUES ({_keyValues});
    {_keyDeclareNewId}
    SELECT {_keySelectNoIdParameters} FROM {_keyTableName}{_keyEntityFilterSegmentNoAnd};
END;
".Trim();

        private string IdTemplate => @$"
{KeyCreationHeader} {KeyProcedureName}({_keyParameters})
BEGIN
    INSERT INTO {_keyTableName} ({_keyColumns}) VALUES ({_keyValues});
    {_keyDeclareNewId}
    SELECT * FROM {_keyTableName} WHERE {_keyTableName}.{_keyIdColumn}=@nid{_keyEntityFilterSegment};
END;
".Trim();
    }
}