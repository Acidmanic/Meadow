using System;
using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection;
using Acidmanic.Utilities.Reflection.ObjectTree;

namespace Meadow.DataTypeMapping
{
    public class TypeDatabaseDefinition
    {
        public Dictionary<string, FieldType> FieldTypes { get; set; } = new Dictionary<string, FieldType>();
        
        public  FieldType IdField { get; set; }
        
        public bool HasId { get; set; }
        
        
        public Type CorrespondingType { get; set; }

        public static TypeDatabaseDefinition FromType<T>(IDbTypeNameMapper mapper)
        {

            var leaves = ObjectStructure.CreateStructure<T>(false)
                .GetDirectLeaves();

            var idLeaf = TypeIdentity.FindIdentityLeaf<T>();

            var definition = new TypeDatabaseDefinition();

            leaves.ForEach(l => definition.FieldTypes.Add(l.Name, new FieldType
            {
                Type = l.Type,
                DbTypeName = mapper.GetDatabaseTypeName(l.Type,l.PropertyAttributes),
                IsAutoGenerated = l.IsAutoValued,
                ColumnName = l.Name
            }));
            
            if (idLeaf != null)
            {
                definition.HasId = true;

                definition.IdField = definition.FieldTypes
                    .Where(ft=> ft.Key == idLeaf.Name)
                    .Select(ft => ft.Value)
                    .FirstOrDefault();
            }

            definition.CorrespondingType = typeof(T);
            
            return definition;
        }   
        


    }
}