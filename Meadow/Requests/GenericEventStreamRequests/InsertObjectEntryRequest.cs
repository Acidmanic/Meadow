using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection;
using Acidmanic.Utilities.Reflection.FieldInclusion;
using Meadow.Contracts;
using Meadow.Requests.GenericEventStreamRequests.Models;

namespace Meadow.Requests.GenericEventStreamRequests;

public sealed class
    InsertObjectEntryRequest<TEvent, TEventId, TStreamId> :
        EventStreamRequestBase<TEvent, TEventId, TStreamId, ObjectEntry<TEventId, TStreamId>>
{

    private static readonly IReadOnlyList<string> AutoGeneratedFields =
        TypeIdentity.GetAutoGeneratedLeaves<ObjectEntry<TEventId, TStreamId>>()
            .Select(n => n.GetFullName())
            .ToList();
    
    
    public InsertObjectEntryRequest(ObjectEntry<TEventId, TStreamId> entry)
    {
        ToStorage = entry;
    }

    protected override void OnFieldManipulation(IFieldInclusionMarker toStorage,
        IFieldInclusionMarker fromStorage)
    {
        base.OnFieldManipulation(toStorage, fromStorage);

        foreach (var autoGeneratedField in AutoGeneratedFields)
        {
            toStorage.Exclude(autoGeneratedField);
        }
    }

    

    protected override string PickName(NameConvention nameConvention)
    {
        return nameConvention.InsertEventProcedure;
    }
}