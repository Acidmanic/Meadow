using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection;
using Acidmanic.Utilities.Reflection.FieldInclusion;
using Meadow.Contracts;
using Meadow.Requests.GenericEventStreamRequests.Models;
using Meadow.Utility;

namespace Meadow.Requests.GenericEventStreamRequests;

public sealed class
    AppendEventToStreamRequest<TEvent, TEventId, TStreamId> :
        EventStreamRequestBase<TEvent, TEventId, TStreamId, ObjectEntry<TEventId, TStreamId>>
{

    private static readonly IReadOnlyList<string> AutoGeneratedFields =
        TypeIdentity.GetAutoGeneratedLeaves<ObjectEntry<TEventId, TStreamId>>()
            .Select(n => n.GetFullName())
            .ToList();
    
    
    public AppendEventToStreamRequest(TStreamId streamId, TEvent e)
    {
        
        Setup(context =>
        {
            
            var entry = EventStreamUtilities.ToEntry<TEventId, TStreamId>
                (e, streamId,context.Configuration);

            if (entry is null)
            {
                entry = new ObjectEntry<TEventId, TStreamId>()
                {
                    EventId = default,
                    SerializedValue = default,
                    StreamId = default,
                    TypeName = typeof(object).FullName
                };
            }
            ToStorage = entry;    
        });
        
        
    }

    protected override void OnFieldManipulation(IFieldInclusionMarker toStorage,
        IFieldInclusionMarker fromStorage)
    {
        base.OnFieldManipulation(toStorage, fromStorage);

        foreach (var autoGeneratedField in AutoGeneratedFields)
        {
            toStorage.Exclude(autoGeneratedField);
        }
    }


    protected override string PickName(NameConvention nameConvention)
    {
        return nameConvention.InsertEventProcedure;
    }
}