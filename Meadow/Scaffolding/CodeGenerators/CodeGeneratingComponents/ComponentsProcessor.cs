using System.Linq;
using Acidmanic.Utilities.Reflection.ObjectTree;
using Acidmanic.Utilities.Reflection.ObjectTree.FieldAddressing;
using Meadow.Scaffolding.Models;

namespace Meadow.Scaffolding.CodeGenerators.CodeGeneratingComponents;

public class ComponentsProcessor
{
    public ComponentsProcessor(ProcessedType processedType)
    {
        ProcessedType = processedType;
    }

    public ProcessedType ProcessedType { get; }
    
    public SaveProcedureComponents CreateSaveProcedureAnalysis(string collectionName, params FieldKey[] identifierFields)
    {
        var allParameters = ProcessedType.Parameters;

        var identifierParameters = allParameters.Where(p =>
            identifierFields.Any(i => string.CompareOrdinal(i.ToString(), p.StandardAddress) == 0)).ToList();

        var ev = new ObjectEvaluator(ProcessedType.NameConvention.EntityType);

        bool IsAutoGenerated(Parameter p) => ev.Map.NodeByAddress(p.StandardAddress).IsAutoValued;

        var nonAutoGeneratedParameters = allParameters.Where(p=>!IsAutoGenerated(p)).ToList();

        return new SaveProcedureComponents(ProcessedType.SaveProcedureNames[collectionName], identifierParameters, nonAutoGeneratedParameters);
    }
}