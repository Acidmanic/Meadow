using System;
using Meadow.Contracts;
using Meadow.DataTypeMapping;
using Meadow.Scaffolding.Models;
using Meadow.Utility;

namespace Meadow.Scaffolding.Snippets;


public interface IParameterBuilder
{
    ParameterBuilder Name(string name);
    ParameterBuilder Type(string typeName, bool isNumerical = false);
    ParameterBuilder Type(Type type);
    ParameterBuilder Unique();
    ParameterBuilder Unique(bool isUnique);
    ParameterBuilder AutoGenerated();
    ParameterBuilder AutoGenerated(bool isAutoGenerated);
    ParameterBuilder Type<T>();
}

public class ParameterBuilder:IParameterBuilder
{
    private readonly IDbTypeNameMapper _dbTypeNameMapper;

    private string _name = "Parameter";
    private string _standardName = "Model.Parameter";
    private string _typeName = "string";
    private bool _isNumerical = false;
    private bool _isUnique = false;
    private bool _isAutoGenerated = false;


    public ParameterBuilder(IDbTypeNameMapper dbTypeNameMapper)
    {
        _dbTypeNameMapper = dbTypeNameMapper;
        _typeName = dbTypeNameMapper.GetDatabaseTypeName(typeof(string));
    }

    public ParameterBuilder Name(string name)
    {
        _name = name;

        _standardName = "Model." + name;

        return this;
    }


    public ParameterBuilder Type(string typeName, bool isNumerical = false)
    {
        _typeName = typeName;

        _isNumerical = isNumerical;

        return this;
    }

    public ParameterBuilder Type(Type type)
    {
        _typeName = _dbTypeNameMapper.GetDatabaseTypeName(type);

        _isNumerical = EntityTypeUtilities.IsNumeric(type);

        return this;
    }

    public ParameterBuilder Unique()
    {
        _isUnique = true;

        return this;
    }

    public ParameterBuilder Unique(bool isUnique)
    {
        _isUnique = isUnique;

        return this;
    }

    public ParameterBuilder AutoGenerated() => AutoGenerated(true);

    public ParameterBuilder AutoGenerated(bool isAutoGenerated)
    {
        _isAutoGenerated = isAutoGenerated;

        return this;
    }


    public ParameterBuilder Type<T>() => Type(typeof(T));


    public Parameter Build()
    {
        var parameter = new Parameter
        {
            Name = _name,
            IdentifierStatus = ParameterIdentifierStatus.None,
            IsNumerical = _isNumerical,
            StandardAddress = _standardName,
            Type = _typeName
        };

        if (_isUnique) parameter.IdentifierStatus |= ParameterIdentifierStatus.Unique;
        if (_isAutoGenerated) parameter.IdentifierStatus |= ParameterIdentifierStatus.AutoGenerated;

        return parameter;
    }
}