using System;
using System.Collections.Generic;
using System.Linq;
using Meadow.Contracts;
using Meadow.DataTypeMapping;
using Meadow.Scaffolding.Models;
using Meadow.Utility;

namespace Meadow.Scaffolding.Snippets;

public interface IParameterBuilder
{
    IParameterBuilder Name(string name);
    IParameterBuilder Type(string typeName, bool isNumerical = false);
    IParameterBuilder Type(Type type);
    IParameterBuilder Unique();
    IParameterBuilder Unique(bool isUnique);
    IParameterBuilder AutoGenerated();
    IParameterBuilder AutoGenerated(bool isAutoGenerated);
    IParameterBuilder Type<T>();
    IParameterBuilder Add();
    
}

public class ParameterBuilder:IParameterBuilder
{

    private readonly List<B> _parameters = new ();
    private B CurrentBuilder
    {
        get
        {
            if (_parameters.Count == 0)
            {
                _parameters.Add(new B(_dbTypeNameMapper,this));
            }

            return _parameters.Last();
        }
    }

    private readonly IDbTypeNameMapper _dbTypeNameMapper;
        
    private class  B:IParameterBuilder
    {
        private readonly IDbTypeNameMapper _dbTypeNameMapper;
        private readonly IParameterBuilder _originalBuilder;
        
            private string _name = "Parameter";
            private string _standardName = "Model.Parameter";
            private string _typeName = "string";
            private bool _isNumerical = false;
            private bool _isUnique = false;
            private bool _isAutoGenerated = false;
        
        
            public B(IDbTypeNameMapper dbTypeNameMapper, IParameterBuilder originalBuilder)
            {
                _dbTypeNameMapper = dbTypeNameMapper;
                _originalBuilder = originalBuilder;
                _typeName = dbTypeNameMapper.GetDatabaseTypeName(typeof(string));
            }
        
            public IParameterBuilder Name(string name)
            {
                _name = name;
        
                _standardName = "Model." + name;
        
                return this;
            }
        
        
            public IParameterBuilder Type(string typeName, bool isNumerical = false)
            {
                _typeName = typeName;
        
                _isNumerical = isNumerical;
        
                return this;
            }
        
            public IParameterBuilder Type(Type type)
            {
                _typeName = _dbTypeNameMapper.GetDatabaseTypeName(type);
        
                _isNumerical = EntityTypeUtilities.IsNumeric(type);
        
                return this;
            }
        
            public IParameterBuilder Unique()
            {
                _isUnique = true;
        
                return this;
            }
        
            public IParameterBuilder Unique(bool isUnique)
            {
                _isUnique = isUnique;
        
                return this;
            }
        
            public IParameterBuilder AutoGenerated() => AutoGenerated(true);
        
            public IParameterBuilder AutoGenerated(bool isAutoGenerated)
            {
                _isAutoGenerated = isAutoGenerated;
        
                return this;
            }
        
        
            public IParameterBuilder Type<T>() => Type(typeof(T));
            public IParameterBuilder Add()
            {
                return _originalBuilder.Add();
            }

            public Parameter Build()
            {
                var parameter = new Parameter
                {
                    Name = _name,
                    IdentifierStatus = ParameterIdentifierStatus.None,
                    IsNumerical = _isNumerical,
                    StandardAddress = _standardName,
                    Type = _typeName
                };

                if (_isUnique) parameter.IdentifierStatus |= ParameterIdentifierStatus.Unique;
                if (_isAutoGenerated) parameter.IdentifierStatus |= ParameterIdentifierStatus.AutoGenerated;

                return parameter;
            }
    }

    public ParameterBuilder(IDbTypeNameMapper dbTypeNameMapper)
    {
        _dbTypeNameMapper = dbTypeNameMapper;
        
    }

    public IParameterBuilder Name(string name) => CurrentBuilder.Name(name);

    public IParameterBuilder Type(string typeName, bool isNumerical = false) => CurrentBuilder.Type(typeName, isNumerical);

    public IParameterBuilder Type(Type type) => CurrentBuilder.Type(type);

    public IParameterBuilder Unique() => CurrentBuilder.Unique();

    public IParameterBuilder Unique(bool isUnique) => CurrentBuilder.Unique(isUnique);

    public IParameterBuilder AutoGenerated() => CurrentBuilder.AutoGenerated();

    public IParameterBuilder AutoGenerated(bool isAutoGenerated) => CurrentBuilder.AutoGenerated(isAutoGenerated);

    public IParameterBuilder Type<T>() => CurrentBuilder.Type<T>();

    public IParameterBuilder Add()
    {
        _parameters.Add(new B(_dbTypeNameMapper, this));
        
        return this;
    }

    public Parameter[] Build()
    {
        return _parameters.Select(p => p.Build()).ToArray();
    }
    
}