using System;
using System.Linq;
using System.Text;
using Meadow.Contracts;
using Meadow.Extensions;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;
using Meadow.Scaffolding.Models;
using Meadow.Scaffolding.Snippets;

namespace Meadow.Scaffolding.Extensions;

public static class SnippetToolboxExtensions
{
    public static string EventIdDefinitionPhrase(this SnippetToolbox toolbox, string? tailing = null)
    {
        var postFix = tailing ?? string.Empty;

        var eventIdParameter = EventIdParameter(toolbox);

        return toolbox.ProcessedType.IsEventIdAutogenerated ? string.Empty : toolbox.SqlTranslator.TableColumnDefinition(eventIdParameter) + postFix;
    }


    public static string GetSelectColumns(this SnippetToolbox toolbox)
    {
        return string.Join(',', toolbox.ProcessedType.Parameters.Select(p => p.Name));
    }

    public static string GetInsertColumns(this SnippetToolbox toolbox)
    {
        return string.Join(',', toolbox.ProcessedType.Parameters.Where(p => !p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated)).Select(p => p.Name));
    }


    public static string GetInsertValues(this SnippetToolbox toolbox)
    {
        return string.Join(',', toolbox.ProcessedType.Parameters
            .Where(p => !p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated))
            .Select(p => toolbox.SqlTranslator.ProcedureBodyParameterNamePrefix + p.Name));
    }

    public static string GetProcedureDefinitionParameters(this SnippetToolbox toolbox, Func<Parameter, bool>? select = null)
    {
        Func<Parameter, bool> parameterSelector = select ?? (_ => true);

        return string.Join(',', toolbox.ProcessedType.Parameters
            .Where(parameterSelector)
            .Select(p => toolbox.ParameterNameTypeJoint(p,toolbox.SqlTranslator.ProcedureDefinitionParameterNamePrefix) ));
    }

    public static bool ActsById(this SnippetToolbox toolbox) => toolbox.Configurations.IdAwarenessBehavior.Is(IdAwarenessBehavior.UseById); 
    
    public static string GetReadProcedureDefinitionParametersPhrase(this SnippetToolbox toolbox )
    {
        var byId = ActsById(toolbox);


        if (byId)
        {
            return $"({toolbox.ParameterNameTypeJoint(toolbox.ProcessedType.IdParameter,
                toolbox.SqlTranslator.ProcedureDefinitionParameterNamePrefix)})";
        }

        //TODO: Add parameterLess procedure paranthesis (bool)
        return string.Empty;
    }
    
    public static string WhereByIdClause(this SnippetToolbox toolbox )
    {
        return ActsById(toolbox) ? $" WHERE {toolbox.ProcessedType.IdParameter?.Name} = {toolbox.SqlTranslator.ProcedureBodyParameterNamePrefix}{toolbox.ProcessedType.IdParameter?.Name}" : string.Empty;
    }
    
    

    public static string IdFieldNameOrDefault(this SnippetToolbox toolbox, string defaultName)
    {
        return toolbox.ProcessedType.HasId ? toolbox.ProcessedType.IdParameter.Name : defaultName;
    }

    public static string IdFieldNameOrDefaultFullTree(this SnippetToolbox toolbox, string defaultName)
    {
        return toolbox.ProcessedType.HasId ? toolbox.ProcessedType.IdParameterFullTree.Name : defaultName;
    }

    public static string EventIdProcedureParameterPhrase(this SnippetToolbox toolbox, string? tailing = null)
    {
        var postFix = tailing ?? string.Empty;

        var eventIdParameter = EventIdParameter(toolbox);

        return toolbox.ProcessedType.IsEventIdAutogenerated ? string.Empty : toolbox.SqlTranslator.ProcedureDefinitionParameterNamePrefix + eventIdParameter.Name + " " + eventIdParameter.Type + postFix;
    }


    private static Parameter EventIdParameter(this SnippetToolbox toolbox)
    {
        var eventIdParameter = new Parameter()
        {
            Name = "EventId",
            IdentifierStatus = ParameterIdentifierStatus.Unique,
            IsNumerical = toolbox.ProcessedType.IsEventIdAutogenerated,
            StandardAddress = "EventModel.EventId",
            Type = toolbox.ProcessedType.EventIdTypeName
        };
        if (eventIdParameter.IsNumerical) eventIdParameter.IdentifierStatus |= ParameterIdentifierStatus.AutoGenerated;

        return eventIdParameter;
    }
}