using Meadow.Contracts;
using Meadow.Scaffolding.Models;
using Meadow.Scaffolding.Snippets;

namespace Meadow.Scaffolding.Extensions;

public static class SnippetToolboxExtensions
{
    public static string EventIdDefinitionPhrase(this SnippetToolbox toolbox, string? tailing = null)
    {
        var postFix = tailing ?? string.Empty;

        var eventIdParameter = EventIdParameter(toolbox);
        
        return toolbox.ProcessedType.IsEventIdAutogenerated ? string.Empty : toolbox.SqlTranslator.TableColumnDefinition(eventIdParameter) + postFix;
    }
    
    public static string EventIdProcedureParameterPhrase(this SnippetToolbox toolbox, string? tailing = null)
    {
        var postFix = tailing ?? string.Empty;

        var eventIdParameter = EventIdParameter(toolbox);

        return toolbox.ProcessedType.IsEventIdAutogenerated ? string.Empty : 
            toolbox.SqlTranslator.ProcedureDefinitionParameterNamePrefix + eventIdParameter.Name + " " + eventIdParameter.Type + postFix;
    }

    private static Parameter EventIdParameter(this SnippetToolbox toolbox)
    {
        var eventIdParameter = new Parameter()
        {
            Name = "EventId",
            IdentifierStatus = ParameterIdentifierStatus.Unique,
            IsNumerical = toolbox.ProcessedType.IsEventIdAutogenerated,
            StandardAddress = "EventModel.EventId",
            Type = toolbox.ProcessedType.EventIdTypeName
        };
        if (eventIdParameter.IsNumerical) eventIdParameter.IdentifierStatus |= ParameterIdentifierStatus.AutoGenerated;
        
        return eventIdParameter;
    }
}