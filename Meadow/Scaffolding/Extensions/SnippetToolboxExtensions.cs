using System;
using System.Collections.Generic;
using System.Linq;
using Meadow.Contracts;
using Meadow.Extensions;
using Meadow.Models;
using Meadow.Scaffolding.Macros.BuiltIn.Snippets;
using Meadow.Scaffolding.Models;
using Meadow.Scaffolding.Snippets;
using Meadow.Sql.Extensions;
using Meadow.Utility;

namespace Meadow.Scaffolding.Extensions;

public static class SnippetToolboxExtensions
{
    public static string EventIdDefinitionPhrase(this ISnippetToolbox toolbox, string? tailing = null)
    {
        var postFix = tailing ?? string.Empty;

        var eventIdParameter = EventIdParameter(toolbox);

        return toolbox.SqlTranslator.TableColumnDefinition(eventIdParameter) + postFix;
    }


    public static string GetSelectColumns(this ISnippetToolbox toolbox,
        ColumnNameTranslation columnNameTranslation = ColumnNameTranslation.ColumnNameOnly)
    {
        if (columnNameTranslation == ColumnNameTranslation.FullTree)
        {
            return string.Join(',', toolbox.ProcessedType.ParametersFullTree.Select(p => p.Name));
        }

        if (columnNameTranslation == ColumnNameTranslation.DataOwnerDotColumnName)
        {
            var effectiveTableName = NameOrOverride(toolbox, nc => nc.TableName);

            return string.Join(',', toolbox.ProcessedType.Parameters.Select(p => $"{effectiveTableName}.{p.Name}"));
        }

        return string.Join(',', toolbox.ProcessedType.Parameters.Select(p => p.Name));
    }

    public static List<Parameter> GetNoneAutoGeneratedParameters(this ISnippetToolbox toolbox)
    {
        return toolbox.ProcessedType.Parameters
            .Where(p => !p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated))
            .ToList();
    }

    public static string GetNoneAutoGeneratedColumns(this ISnippetToolbox toolbox)
    {
        return string.Join(',', toolbox.GetNoneAutoGeneratedParameters()
            .Select(p => p.Name));
    }


    public static string GetNoneAutoGeneratedValues(this ISnippetToolbox toolbox)
    {
        return string.Join(',', toolbox.ProcessedType.Parameters
            .Where(p => !p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated))
            .Select(p => toolbox.SqlTranslator.Decorate(p, ParameterUsage.ProcedureBody)));
    }

    public static string GetNoneAutoGeneratedSets(this ISnippetToolbox toolbox)
    {
        var noneAutoGeneratedParameters = toolbox.ProcessedType.Parameters
            .Where(p => !p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated));

        return toolbox.ParameterNameValueSetPair(noneAutoGeneratedParameters, ",");
    }

    public static string GetProcedureDefinitionParameters(this ISnippetToolbox toolbox,
        Func<Parameter, bool>? select = null)
    {
        Func<Parameter, bool> parameterSelector = select ?? (_ => true);

        return string.Join(',', toolbox.ProcessedType.Parameters
            .Where(parameterSelector)
            .Select(p =>
                toolbox.ParameterNameTypePair(p, ParameterUsage.ProcedureDeclaration)));
    }

    public static string TranslateTable(this ISnippetToolbox toolbox, Action<IParameterBuilder> setup,
        string? overridenTableName = null)
        => TranslateTable(toolbox, Parameters(toolbox, setup), overridenTableName);

    public static string TranslateTable(this ISnippetToolbox toolbox, string? overridenTableName = null,
        params Parameter[] parameters)
        => TranslateTable(toolbox, (IEnumerable<Parameter>)parameters, overridenTableName);

    public static string TranslateTable(this ISnippetToolbox toolbox, IEnumerable<Parameter> parameters,
        string? overridenTableName = null)
    {
        string tableDeclarationPhrase =
            (overridenTableName is { } tableName) ? CreateTablePhrase(toolbox, tableName) : CreateTablePhrase(toolbox);

        var definitions = parameters.ToArray().Select(toolbox.SqlTranslator.TableColumnDefinition).ToArray();

        var declarations = string.Join(',', definitions.Select(d => d.Declaration));

        var tailing = string.Join(',', definitions
            .Select(d => d.AuxiliaryContent)
            .Where(a => !string.IsNullOrWhiteSpace(a)));

        var tableContent = declarations;

        if (!string.IsNullOrWhiteSpace(tailing))
        {
            tableContent += ",\n" + tailing;
        }

        var semicolon = toolbox.SqlTranslator.UsesSemicolon ? ";" : string.Empty;

        return $"{tableDeclarationPhrase}({tableContent}){semicolon}";
    }

    public static string TranslateEventStreamsPhraseInsertProcedure(this ISnippetToolbox toolbox)
    {
        var parameters = toolbox.ProcessedType.EventStreamParameters.Where(p =>
                p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) == false)
            .ToArray();

        var tableName = toolbox.ProcessedType.NameConvention.EventStreamTableName;

        var body =  TranslateParametricInsertPhrase(toolbox, tableName, parameters);
        
        
        return Procedure(toolbox, toolbox.Configurations.RepetitionHandling,
            toolbox.ProcessedType.NameConvention.InsertEventProcedure,
            body, string.Empty,
            toolbox.ProcessedType.NameConvention.EventStreamTableName, parameters);
    }

    public static string TranslateParametricInsertForEventStreamsPhrase(this ISnippetToolbox toolbox)
    {
        var parameters = toolbox.ProcessedType.EventStreamParameters.Where(p =>
                p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) == false)
            .ToArray();

        var tableName = toolbox.ProcessedType.NameConvention.EventStreamTableName;

        return TranslateParametricInsertPhrase(toolbox, tableName, parameters);
    }
    
    public static string TranslateParametricInsertPhrase(this ISnippetToolbox toolbox)
        => TranslateParametricInsertPhrase(toolbox, toolbox.ProcessedType.NameConvention.TableName,
            toolbox.ProcessedType.Parameters
                .Where(p => p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) == false).ToArray());

    public static string TranslateParametricInsertPhrase(this ISnippetToolbox toolbox, string? tableName = null,params Parameter[] parameters)
    {
        var columns = string.Join(',',parameters.Select(p => toolbox.SqlTranslator.Decorate(p,ParameterUsage.ColumnName)));
        var values = string.Join(',',parameters.Select(p => toolbox.SqlTranslator.Decorate(p,ParameterUsage.ProcedureBody)));
        var sourceName = SourceName(toolbox,false,tableName);
        var semi = Semicolon(toolbox);
        
        return $"INSERT INTO {sourceName} ({columns}) VALUES ({values}){semi}";
    }
    
    public static bool ActsById(this ISnippetToolbox toolbox) =>
        toolbox.Configurations.IdAwarenessBehavior.Is(IdAwarenessBehavior.UseById);

    public static bool ActsAll(this ISnippetToolbox toolbox) =>
        toolbox.Configurations.IdAwarenessBehavior.Is(IdAwarenessBehavior.UseAll);

    public static string IfById(this ISnippetToolbox toolbox, string byIdTerm, string notByItTerm = "") =>
        ActsById(toolbox) ? byIdTerm : notByItTerm;


    public static string GetIdAwareProcedureDefinitionParametersPhrase(this ISnippetToolbox toolbox) =>
        GetIdAwareProcedureDefinitionParametersPhrase(toolbox, ActsById(toolbox));


    public static Parameter[] GetIdAwareProcedureDefinitionParameters(this ISnippetToolbox toolbox, bool byId)
    {
        if (byId && toolbox.ProcessedType.HasId)
        {
            return new[] { toolbox.ProcessedType.IdParameter };
        }

        return new Parameter[] { };
    }

    public static string GetIdAwareProcedureDefinitionParametersPhrase(this ISnippetToolbox toolbox, bool byId)
    {
        if (byId && toolbox.ProcessedType.HasId)
        {
            return
                $"({toolbox.ParameterNameTypePair(toolbox.ProcessedType.IdParameter, ParameterUsage.ProcedureDeclaration)})";
        }

        if (toolbox.SqlTranslator.ParameterLessProcedureDefinitionParentheses)
        {
            return "()";
        }

        return string.Empty;
    }


    public static string WhereByIdClause(this ISnippetToolbox toolbox, bool fullTree = false) =>
        WhereByIdClause(toolbox, ActsById(toolbox), fullTree);

    public static string WhereByIdClause(this ISnippetToolbox toolbox, bool actById, bool fullTree)
    {
        var tableIdParameter = fullTree ? toolbox.ProcessedType.IdParameterFullTree : toolbox.ProcessedType.IdParameter;

        var procedureIdParameter = toolbox.ProcessedType.IdParameter;

        var source = SourceName(toolbox, fullTree);

        var qt = toolbox.SqlTranslator.GetQuoters();
        var tq = qt.QuoteTableName;
        var cq = qt.QuoteColumnName;

        var procedureParameter = toolbox.SqlTranslator.Decorate(procedureIdParameter, ParameterUsage.ProcedureBody);

        return actById
            ? $" WHERE {tq(source)}.{cq(tableIdParameter.Name)} = {procedureParameter}"
            : string.Empty;
    }

    public static Parameter[] GetValueParameters(this ISnippetToolbox toolbox) => toolbox.ProcessedType.Parameters
        .Where(p =>
            !p.IdentifierStatus.Is(ParameterIdentifierStatus.AutoGenerated) &&
            !p.IdentifierStatus.Is(ParameterIdentifierStatus.Unique)).ToArray();


    public static string EqualityClause(this ISnippetToolbox toolbox, string? sourceName = null, bool fullTree = false,
        params Parameter[] parameters)
    {
        return string.Join(" AND ", parameters.Select(p => EqualityClause(toolbox, p, fullTree, sourceName)));
    }

    public static string WhereByValuesClause(this ISnippetToolbox toolbox, bool fullTree = false)
    {
        var valueParameters = GetValueParameters(toolbox);

        return " WHERE " + EqualityClause(toolbox, toolbox.ProcessedType.NameConvention.TableName, fullTree,
            valueParameters);
    }

    public static string SourceName(this ISnippetToolbox toolbox, bool fullTree = false, string? tableName = null)
    {
        string sourceName;

        if (tableName is { } name)
        {
            sourceName = name;
        }
        else if (toolbox.Configurations.OverrideDbObjectName)
        {
            return toolbox.Configurations.OverrideDbObjectName.Value(toolbox.Construction);
        }
        else
        {
            sourceName = TableOrFullViewName(toolbox, fullTree);
        }

        return sourceName;
    }

    public static string EqualityClause(this ISnippetToolbox toolbox, Parameter column, string variableName,
        bool fullTree = false, string? tableName = null)
    {
        var sourceName = SourceName(toolbox, fullTree, tableName);

        return sourceName + "." + column.Name + " " + toolbox.SqlTranslator.EqualityAssertionOperator(column) + " " +
               variableName;
    }

    public static string EqualityClause(this ISnippetToolbox toolbox, Parameter p, bool fullTree = false,
        string? tableName = null)
    {
        var sourceName = SourceName(toolbox, fullTree, tableName);

        var columnName = toolbox.SqlTranslator.Decorate(p, ParameterUsage.ColumnName);
        
        if(fullTree) columnName = toolbox.SqlTranslator.Decorate(
            toolbox.FullTreeTranslation.GetFullTreeColumnNameByAddress(p.StandardAddress)
            , ParameterUsage.ColumnName);
        
        var bodyName = toolbox.SqlTranslator.Decorate(p, ParameterUsage.ProcedureBody);

        return EqualityClause(toolbox, sourceName + "." + columnName, bodyName, p.IsString);
    }

    public static string EqualityClause(this ISnippetToolbox toolbox, string var1, string var2, bool isString)
        => $"{var1} {toolbox.SqlTranslator.EqualityAssertionOperator(isString)} {var2}";

    public static string TableOrFullViewName(this ISnippetToolbox toolbox, bool fullTreeView = false)
    {
        return fullTreeView
            ? toolbox.ProcessedType.NameConvention.FullTreeViewName
            : toolbox.ProcessedType.NameConvention.TableName;
    }

    public static string IdFieldNameOrDefault(this ISnippetToolbox toolbox, string defaultName)
    {
        return toolbox.ProcessedType.HasId ? toolbox.ProcessedType.IdParameter.Name : defaultName;
    }

    public static string IdFieldTypeNameOrDefault(this ISnippetToolbox toolbox, string defaultType = "")
    {
        return toolbox.ProcessedType.HasId ? toolbox.ProcessedType.IdParameter.Type : defaultType;
    }

    public static string IdFieldTypeNameOrDefault<TDefault>(this ISnippetToolbox toolbox) =>
        IdFieldTypeNameOrDefault(toolbox, typeof(TDefault));

    public static string IdFieldTypeNameOrDefault(this ISnippetToolbox toolbox, Type type)
    {
        var defaultType = toolbox.TypeNameMapper.GetDatabaseTypeName(type);

        return toolbox.ProcessedType.HasId ? toolbox.ProcessedType.IdParameter.Type : defaultType;
    }

    public static string IdFieldNameOrDefaultFullTree(this ISnippetToolbox toolbox, string defaultName)
    {
        return toolbox.ProcessedType.HasId ? toolbox.ProcessedType.IdParameterFullTree.Name : defaultName;
    }


    public static string GetReadProcedureName(this ISnippetToolbox toolbox, bool fullTree, bool byId)
    {
        if (fullTree)
        {
            return byId
                ? toolbox.ProcessedType.NameConvention.ReadByIdProcedureNameFullTree
                : toolbox.ProcessedType.NameConvention.ReadAllProcedureNameFullTree;
        }

        return byId
            ? toolbox.ProcessedType.NameConvention.ReadByIdProcedureName
            : toolbox.ProcessedType.NameConvention.ReadAllProcedureName;
    }

    private static Parameter EventIdParameter(this ISnippetToolbox toolbox)
    {
        var eventIdParameter = new Parameter()
        {
            Name = "EventId",
            IdentifierStatus = ParameterIdentifierStatus.Unique,
            IsNumerical = toolbox.ProcessedType.IsEventIdAutogenerated,
            StandardAddress = "EventModel.EventId",
            Type = toolbox.ProcessedType.EventIdTypeName
        };

        return eventIdParameter;
    }

    public static string NameOrOverride(this ISnippetToolbox toolbox, Func<NameConvention, string> pick)
    {
        if (toolbox.Configurations.OverrideDbObjectName)
        {
            return toolbox.Configurations.OverrideDbObjectName.Value(toolbox.Construction);
        }

        return pick(toolbox.ProcessedType.NameConvention);
    }

    public static string CreateTablePhrase(this ISnippetToolbox toolbox, string tableName)
    {
        return toolbox.SqlTranslator.CreateTablePhrase(toolbox.Configurations.RepetitionHandling, tableName);
    }

    public static string CreateTablePhrase(this ISnippetToolbox toolbox)
    {
        return CreateTablePhrase(toolbox, NameOrOverride(toolbox, nc => nc.TableName));
    }


    public static string Procedure(this ISnippetToolbox toolbox, RepetitionHandling repetition, string procedureName,
        Action<IParameterBuilder> parameters,
        string body, string declarations = "", string returnTypeName = "")
    {
        var parameterBuilder = new ParameterBuilder(toolbox.TypeNameMapper);

        parameters(parameterBuilder);

        return Procedure(toolbox, repetition, procedureName, body, declarations, returnTypeName,
            parameterBuilder.Build());
    }

    public static string Procedure(this ISnippetToolbox toolbox, RepetitionHandling repetition, string procedureName,
        string body, string declarations = "", string returnTypeName = "", params Parameter[] parameters)
    {
        var creationPhrase = toolbox.SqlTranslator.CreateProcedurePhrase(repetition, procedureName);

        var parametersDefinition = toolbox.ParameterNameTypePair(parameters, ",", ParameterUsage.ProcedureDeclaration);

        return toolbox.SqlTranslator.FormatProcedure(creationPhrase, parametersDefinition, body, declarations,
            returnTypeName);
    }

    public static Parameter[] Parameters(this ISnippetToolbox toolbox, Action<IParameterBuilder> setup)
    {
        var builder = new ParameterBuilder(toolbox.TypeNameMapper);

        setup(builder);

        return builder.Build();
    }

    public static string Semicolon(this ISnippetToolbox toolbox) =>
        toolbox.SqlTranslator.UsesSemicolon ? ";" : string.Empty;
}