using System;
using System.Collections.Generic;
using System.Linq;
using Acidmanic.Utilities.Reflection.ObjectTree;

namespace Meadow.RelationalTranslation
{
    internal static class IdHelper
    {

        public static AccessNode GetIdLeaf<TEntity>()
        {
            return GetIdLeaf(typeof(TEntity));
        }
        public static AccessNode GetIdLeaf(Type type)
        {
            var idLeaf = GetAutoGeneratedLeaf(type);

            if (idLeaf != null)
            {
                return idLeaf;
            }

            idLeaf = GetUniqueLeaves(type)
                .FirstOrDefault();

            if (idLeaf != null)
            {
                return idLeaf;
            }

            idLeaf = GetLeafByName(type,"Id", "ID", "id", "iD")
                .FirstOrDefault();

            return idLeaf;
        }

        public static IEnumerable<AccessNode> GetLeafByName<TEntity>(params string[] acceptableNames)
        {
            return GetLeafByName(typeof(TEntity), acceptableNames);
        }

        public static IEnumerable<AccessNode> GetLeafByName(Type type,params string[] acceptableNames)
        {
            return GetLeaves(type,l => acceptableNames.Contains(l.Name));
        }

        public static AccessNode GetAutoGeneratedLeaf<TEntity>()
        {
            return GetAutoGeneratedLeaf(typeof(TEntity));
        }


        public static AccessNode GetAutoGeneratedLeaf(Type type)
        {
            return GetLeaves(type,l => l.IsAutoValued)
                .FirstOrDefault();
        }

        public static IEnumerable<AccessNode> GetUniqueLeaves<TEntity>()
        {
            return GetUniqueLeaves(typeof(TEntity));
        }
        
        public static IEnumerable<AccessNode> GetUniqueLeaves(Type type)
        {
            return GetLeaves(type,l => l.IsAutoValued);
        }

        private static IEnumerable<AccessNode> GetLeaves(Type type, Func<AccessNode, bool> selector)
        {
            var accessNode = ObjectStructure.CreateStructure( type,false);

            var leaves = accessNode
                .EnumerateLeavesBelow()
                .Where(selector);

            return leaves;
        }
    }
}