using System;
using Meadow.Scaffolding.Attributes;
using Meadow.Scaffolding.Extensions;
using Meadow.Scaffolding.Snippets;

namespace Meadow.SQLite.Snippets;

[CommonSnippet(CommonSnippets.EventStreamScript)]
public class EventStreamSnippet:ISnippet
{
    public SnippetToolbox? Toolbox { get; set; }

    public string KeyTableName => T(t => t.ProcessedType.NameConvention.EventStreamTableName);
    public string KeyEventIdType => T(t => t.ProcessedType.EventIdTypeName);
    public string KeyStreamIdType => T(t => t.ProcessedType.StreamIdTypeName);
    public string KeyTypeNameType => T(t => t.ProcessedType.EventStreamTypeNameDatabaseType);
    public string KeySerializedValueType => T(t => t.ProcessedType.EventStreamSerializedValueDatabaseType);
    public string KeyInsertProcedureName => T(t => t.ProcessedType.NameConvention.InsertEvent);
    public string KeyEventIdDefinition => T(t => t.EventIdDefinitionPhrase(","));
    public string KeyEventIdInsertParameter => T(t => t.EventIdProcedureParameterPhrase(","));
    public string KeyEventIdInsertColumn => T(t => t.ProcessedType.IsEventIdAutogenerated ? "" : ", EventId");
    public string KeyEventIdInsertValue => T(t => t.ProcessedType.IsEventIdAutogenerated ? "" : $", {t.SqlTranslator.ProcedureBodyParameterNamePrefix}EventId");
    public string KeyReadAllStreamsProcedureName => T(t => t.ProcessedType.NameConvention.ReadAllStreams);
    public string KeyReadStreamByStreamIdProcedureName => T(t => t.ProcessedType.NameConvention.ReadStreamByStreamId);
    public string KeyReadAllStreamsChunksProcedureName => T(t => t.ProcessedType.NameConvention.ReadAllStreamsChunks);
    public string KeyReadStreamChunkByStreamIdProcedureName => T(t => t.ProcessedType.NameConvention.ReadStreamChunkByStreamId);
    
    
    private string T(Func<SnippetToolbox, string> pickValue)
    {
        if (Toolbox is { } toolbox)
        {
            return pickValue(toolbox);
        }

        return string.Empty;
    }
    
    public string Template => @"
-- ---------------------------------------------------------------------------------------------------------------------
CREATE TABLE {KeyTableName} (
    {KeyEventIdDefinition}
    StreamId {KeyStreamIdType},
    TypeName {KeyTypeNameType},
    SerializedValue {KeySerializedValueType});
-- ---------------------------------------------------------------------------------------------------------------------
-- SPLIT
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {KeyInsertProcedureName}({KeyEventIdInsertParameter}
                                   @StreamId {KeyStreamIdType},
                                   @TypeName {KeyTypeNameType},
                                   @SerializedValue {KeySerializedValueType}) AS

    INSERT INTO {KeyTableName} (StreamId, TypeName, SerializedValue{KeyEventIdInsertColumn}) 
        VALUES (StreamId,TypeName,SerializedValue{KeyEventIdInsertValue});
    
    SELECT * FROM {KeyTableName} WHERE ROWID=LAST_INSERT_ROWID(); 
GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {KeyReadAllStreamsProcedureName} AS
    SELECT * FROM {KeyTableName};
GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {KeyReadStreamByStreamIdProcedureName}(@StreamId {KeyStreamIdType}) AS
    SELECT * FROM {KeyTableName} WHERE {KeyTableName}.StreamId = @StreamId;
GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {KeyReadAllStreamsChunksProcedureName}(
                                         @BaseEventId {KeyEventIdType},
                                         @Count INTEGER) AS
    SELECT * FROM {KeyTableName} WHERE EventId > @BaseEventId LIMIT @Count;
GO
-- ---------------------------------------------------------------------------------------------------------------------
CREATE PROCEDURE {KeyReadStreamChunkByStreamIdProcedureName}(
                                        @StreamId {KeyStreamIdType},
                                        @BaseEventId {KeyEventIdType},
                                        @Count INTEGER) AS 
    SELECT * FROM {KeyTableName} WHERE
                  {KeyTableName}.StreamId = @StreamId
                                AND EventId > @BaseEventId LIMIT @Count;
GO
-- ---------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------
-- ---------------------------------------------------------------------------------------------------------------------
".Trim();
}