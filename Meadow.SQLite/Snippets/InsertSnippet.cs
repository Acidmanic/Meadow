using Meadow.Scaffolding.Attributes;
using Meadow.Scaffolding.Extensions;
using Meadow.Scaffolding.Snippets;
using Meadow.Scaffolding.Snippets.Builtin;
using SQLitePCL;

namespace Meadow.SQLite.Snippets;

[CommonSnippet(CommonSnippets.InsertProcedure)]
public class InsertSnippet : ISnippet
{
    public ISnippetToolbox Toolbox { get; set; } = SnippetToolbox.Null;

    public string KeyHeaderCreation => Toolbox.SqlTranslator.CreateProcedurePhrase(Toolbox.Configurations.RepetitionHandling,
        Toolbox.ProcessedType.NameConvention.InsertProcedureName);

    public string KeyParameters => Toolbox.GetProcedureDefinitionParameters();
    public string KeyTableName => Toolbox.ProcessedType.NameConvention.TableName;
    public string KeyInsertColumns => Toolbox.GetNoneAutoGeneratedColumns();
    public string KeyInsertValues => Toolbox.GetNoneAutoGeneratedValues();
    public string KeyEntityFilterSegment => Toolbox.GetEntityFiltersWhereClause(" AND ", " ");


    public string Procedure(string body) => Toolbox.Procedure
    (Toolbox.Configurations.RepetitionHandling, Toolbox.ProcessedType.NameConvention.InsertProcedureName,
        body, string.Empty, Toolbox.ProcessedType.NameConvention.TableName,
        Toolbox.GetNoneAutoGeneratedParameters().ToArray());

    public ISnippet Line => new CommentLineSnippet();

    public string Template => @"
{Procedure}
    INSERT INTO {KeyTableName} ({KeyInsertColumns})
    VALUES ({KeyInsertValues});
    SELECT * FROM {KeyTableName} WHERE ROWID=LAST_INSERT_ROWID(){KeyEntityFilterSegment};
{/Procedure}
{Line}
".Trim();
}