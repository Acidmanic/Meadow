// using System.Collections.Generic;
// using Meadow.DataTypeMapping;
// using Meadow.Scaffolding.CodeGenerators;
//
// namespace Meadow.SQLite.SqlScriptsGenerators
// {
//     public class EventSourcingCodeGenerator:ByTemplateSqlGeneratorBase
//     {
//         public EventSourcingCodeGenerator(IDbTypeNameMapper typeNameMapper) : base(typeNameMapper)
//         {
//         }
//
//         protected override void AddReplacements(Dictionary<string, string> replacementList)
//         {
//             throw new System.NotImplementedException();
//         }
//
//         protected override string Template => $@"
// -- ---------------------------------------------------------------------------------------------------------------------
// CREATE TABLE {_keyTableName} (
//     EventId {_keyEventIdType} PRIMARY KEY {_keyAutogenerated},
//     StreamId {_keyStreamIdType},
//     TypeName {_keyTypeNameType},
//     SerializedValue {_keySerializedValueType});
// -- ---------------------------------------------------------------------------------------------------------------------
// -- SPLIT
// -- ---------------------------------------------------------------------------------------------------------------------
// CREATE PROCEDURE {_keyInsertProcedureName}({_keyEventIdInsertParameter}
//                                    IN StreamId {_keyStreamIdType},
//                                    IN TypeName {_keyTypeNameType},
//                                    IN SerializedValue {_keySerializedValueType}) 
// BEGIN
//
//     INSERT INTO {_keyTableName} (StreamId, TypeName, SerializedValue{_keyEventIdInsertValueAndColumn}) 
//         VALUES (StreamId,TypeName,SerializedValue{_keyEventIdInsertValueAndColumn});
//     
//     {_keyInsertSelectStatement}
//     
// END;
// -- ---------------------------------------------------------------------------------------------------------------------
// CREATE PROCEDURE {_keyReadAllStreamsProcedureName}()
// BEGIN
//
//     SELECT * FROM {_keyTableName};
//
// END;
// -- ---------------------------------------------------------------------------------------------------------------------
// CREATE PROCEDURE {_keyReadStreamByStreamIdProcedureName}(IN StreamId {_keyStreamIdType})
// BEGIN
//
//     SELECT * FROM {_keyTableName} WHERE {_keyTableName}.StreamId = StreamId;
//
// END;
// -- ---------------------------------------------------------------------------------------------------------------------
// CREATE PROCEDURE {_keyReadAllStreamsChunksProcedureName}(
//                                          IN BaseEventId {_keyEventIdType},
//                                          IN Count bigint)
// BEGIN
//
//     SELECT * FROM {_keyTableName} WHERE EventId > BaseEventId
//
//     LIMIT Count;
//
// END;
// -- ---------------------------------------------------------------------------------------------------------------------
// CREATE PROCEDURE {_keyReadStreamChunkByStreamIdProcedureName}(
//                                         IN StreamId {_keyStreamIdType},
//                                         IN BaseEventId {_keyEventIdType},
//                                         IN Count bigint)
// BEGIN
//
//     SELECT * FROM {_keyTableName} WHERE
//                   {_keyTableName}.StreamId = StreamId
//                                 AND EventId > BaseEventId
//     LIMIT Count;
//
// END;
// -- ---------------------------------------------------------------------------------------------------------------------
// -- ---------------------------------------------------------------------------------------------------------------------
// -- ---------------------------------------------------------------------------------------------------------------------
// ".Trim();
//         
//     }
// }